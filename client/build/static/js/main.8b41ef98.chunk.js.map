{"version":3,"sources":["components/Login.jsx","reducers/userReducer.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/offerReducer.js","reducers/index.js","actions/types.js","store.js","actions/errorActions.js","App.js","actions/authActions.js","actions/offerActions.js","serviceWorker.js","index.js"],"names":["Login","initialState","users","token","localStorage","getItem","isAuthenticated","isLoading","user","msg","status","id","offers","combineReducers","state","action","type","error","payload","auth","removeItem","offer","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","returnErrors","App","dispatch","getState","config","headers","axios","get","then","res","data","catch","err","console","log","response","path","exact","component","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b41ef98.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Login = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h2></h2>\n\t\t</div>\n\t);\n};\n\nexport default Login;\n","import { GET_USERS } from \"../actions/types\";\n\nconst initialState = {\n\tusers: []\n};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase GET_USERS:\n\t\t\treturn {\n\t\t\t\t...state\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import {\n\tUSER_LOADING,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT_SUCCESS,\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL\n} from \"../actions/types\";\n\nconst initialState = {\n\ttoken: localStorage.getItem(\"token\"),\n\tisAuthenticated: null,\n\tisLoading: false,\n\tuser: null\n};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase USER_LOADING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true\n\t\t\t};\n\t\tcase USER_LOADED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisAuthenticated: true,\n\t\t\t\tisLoading: false,\n\t\t\t\tuser: action.payload\n\t\t\t};\n\t\tcase LOGIN_SUCCESS:\n\t\tcase REGISTER_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.payload,\n\t\t\t\tisAuthenticated: true,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tcase AUTH_ERROR:\n\t\tcase REGISTER_FAIL:\n\t\tcase LOGIN_FAIL:\n\t\tcase LOGOUT_SUCCESS:\n\t\t\tlocalStorage.removeItem(\"token\");\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttoken: null,\n\t\t\t\tuser: null,\n\t\t\t\tisAuthenticated: false,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { GET_ERRORS, CLEAR_ERRORS } from \"../actions/types\";\n\nconst initialState = {\n\tmsg: {},\n\tstatus: null,\n\tid: null\n};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase GET_ERRORS:\n\t\t\treturn {\n\t\t\t\tmsg: action.payload.msg,\n\t\t\t\tstatus: action.payload.status,\n\t\t\t\tid: action.payload.id\n\t\t\t};\n\t\tcase CLEAR_ERRORS:\n\t\t\treturn {\n\t\t\t\tmsg: {},\n\t\t\t\tstatus: null,\n\t\t\t\tid: null\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { GET_OFFERS, OFFERS_LOADING, GET_OFFERS_ERROR } from \"../actions/types\";\n\nconst initialState = {\n\toffers: [],\n\tisLoading: false\n};\n\nexport default function(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase GET_OFFERS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\toffers: action.payload,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tcase OFFERS_LOADING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true\n\t\t\t};\n\t\tcase GET_OFFERS_ERROR:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\toffers: [],\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { combineReducers } from \"redux\";\nimport userReducer from \"./userReducer\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\nimport offerReducer from \"./offerReducer\";\n\nexport default combineReducers({\n\tuser: userReducer,\n\terror: errorReducer,\n\tauth: authReducer,\n\toffer: offerReducer\n});\n","// AUTH TYPES\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\n\n// ERROR TYPES\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\n// API TYPES\nexport const GET_USERS = \"GET_USERS\";\nexport const GET_OFFERS = \"GET_OFFERS\";\nexport const OFFERS_LOADING = \"OFFERS_LOADING\";\nexport const GET_OFFERS_ERROR = \"GET_OFFERS_ERROR\";\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleWare = [thunk];\n\nconst store = createStore(\n\trootReducer,\n\tinitialState,\n\tcompose(\n\t\tapplyMiddleware(...middleWare),\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ &&\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__()\n\t)\n);\n\nexport default store;\n","import { GET_ERRORS, CLEAR_ERRORS } from \"./types\";\n\n// Return errors\nexport const returnErrors = (msg, status, id = null) => {\n\treturn {\n\t\ttype: GET_ERRORS,\n\t\tpayload: {\n\t\t\tmsg,\n\t\t\tstatus,\n\t\t\tid\n\t\t}\n\t};\n};\n\n// Clear errors\nexport const clearErrors = () => {\n\treturn {\n\t\ttype: CLEAR_ERRORS\n\t};\n};\n","import React, { useEffect, Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { loadUser } from \"./actions/authActions\";\nimport { getOffers } from \"./actions/offerActions\";\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tstore.dispatch(loadUser());\n\t\tstore.dispatch(getOffers());\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<Router>\n\t\t\t\t\t<Route path=\"/\" exact component={Login} />\n\t\t\t\t</Router>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\n\nimport {\n\tUSER_LOADING,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_SUCCESS,\n\tLOGIN_FAIL,\n\tLOGOUT_SUCCESS,\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL\n} from \"./types\";\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n\t// User loading\n\tdispatch({ type: USER_LOADING });\n\n\t// Get token from local storage\n\tconst token = getState().auth.token;\n\n\t// Headers\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-type\": \"application/json\"\n\t\t}\n\t};\n\n\t// If token, then add to headers\n\tif (token) {\n\t\tconfig.headers[\"x-auth-token\"] = token;\n\t}\n\n\taxios\n\t\t.get(\"/api/auth/user\", config)\n\t\t.then(res =>\n\t\t\tdispatch({\n\t\t\t\ttype: USER_LOADED,\n\t\t\t\tpayload: res.data\n\t\t\t})\n\t\t)\n\t\t.catch(err => {\n\t\t\tconsole.log(err);\n\n\t\t\tdispatch(returnErrors(err.response.data, err.response.status));\n\t\t\tdispatch({\n\t\t\t\ttype: AUTH_ERROR\n\t\t\t});\n\t\t});\n};\n","import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\n\nimport { GET_OFFERS, OFFERS_LOADING, GET_OFFERS_ERROR } from \"./types\";\n\n// Get all offers and dispatch to state\nexport const getOffers = () => dispatch => {\n\t// offers loading\n\tdispatch({ type: OFFERS_LOADING });\n\n\t// get all offers from DB\n\taxios\n\t\t.get(\"/api/offers\")\n\t\t.then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype: GET_OFFERS,\n\t\t\t\tpayload: res.data\n\t\t\t});\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(returnErrors(err.response.data, err.response.status));\n\t\t\tdispatch({\n\t\t\t\ttype: GET_OFFERS_ERROR\n\t\t\t});\n\t\t});\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Login.jsx","reducers/userReducer.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/index.js","actions/types.js","store.js","App.js","actions/authActions.js","actions/errorActions.js","serviceWorker.js","index.js"],"names":["Login","initialState","users","firstname","lastname","username","token","localStorage","getItem","isAuthenticated","isLoading","user","msg","status","id","combineReducers","state","action","type","error","payload","auth","removeItem","middleWare","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","dispatch","getState","config","headers","axios","get","then","res","data","catch","err","console","log","returnErrors","response","path","exact","component","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ecac2906.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Login = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2></h2>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n","import { GET_USERS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n\tusers: [\r\n\t\t{\r\n\t\t\tfirstname: \"Joonas\",\r\n\t\t\tlastname: \"Suonpera\",\r\n\t\t\tusername: \"joonassuo\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tfirstname: \"Sanna\",\r\n\t\t\tlastname: \"Silander\",\r\n\t\t\tusername: \"Sannis\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tfirstname: \"Teemu\",\r\n\t\t\tlastname: \"Halme\",\r\n\t\t\tusername: \"thalme\"\r\n\t\t}\r\n\t]\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase GET_USERS:\r\n\t\t\treturn {\r\n\t\t\t\t...state\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import {\r\n\tUSER_LOADING,\r\n\tUSER_LOADED,\r\n\tAUTH_ERROR,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT_SUCCESS,\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n\ttoken: localStorage.getItem(\"token\"),\r\n\tisAuthenticated: null,\r\n\tisLoading: false,\r\n\tuser: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase USER_LOADING:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisLoading: true\r\n\t\t\t};\r\n\t\tcase USER_LOADED:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisAuthenticated: true,\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\tuser: action.payload\r\n\t\t\t};\r\n\t\tcase LOGIN_SUCCESS:\r\n\t\tcase REGISTER_SUCCESS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.payload,\r\n\t\t\t\tisAuthenticated: true,\r\n\t\t\t\tisLoading: false\r\n\t\t\t};\r\n\t\tcase AUTH_ERROR:\r\n\t\tcase REGISTER_FAIL:\r\n\t\tcase LOGIN_FAIL:\r\n\t\tcase LOGOUT_SUCCESS:\r\n\t\t\tlocalStorage.removeItem(\"token\");\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoken: null,\r\n\t\t\t\tuser: null,\r\n\t\t\t\tisAuthenticated: false,\r\n\t\t\t\tisLoading: false\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { GET_ERRORS, CLEAR_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n\tmsg: {},\r\n\tstatus: null,\r\n\tid: null\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase GET_ERRORS:\r\n\t\t\treturn {\r\n\t\t\t\tmsg: action.payload.msg,\r\n\t\t\t\tstatus: action.payload.status,\r\n\t\t\t\tid: action.payload.id\r\n\t\t\t};\r\n\t\tcase CLEAR_ERRORS:\r\n\t\t\treturn {\r\n\t\t\t\tmsg: {},\r\n\t\t\t\tstatus: null,\r\n\t\t\t\tid: null\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\nimport authReducer from \"./authReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\n\r\nexport default combineReducers({\r\n\tuser: userReducer,\r\n\terror: errorReducer,\r\n\tauth: authReducer\r\n});\r\n","export const GET_USERS = \"GET_USERS\";\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleWare = [thunk];\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcompose(\r\n\t\tapplyMiddleware(...middleWare),\r\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n\t\t\twindow.__REDUX_DEVTOOLS_EXTENSION__()\r\n\t)\r\n);\r\n\r\nexport default store;\r\n","import React, { useEffect, Component } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/Login\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { loadUser } from \"./actions/authActions\";\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tstore.dispatch(loadUser());\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Provider store={store}>\n\t\t\t\t<Router>\n\t\t\t\t\t<Route path=\"/\" exact component={Login} />\n\t\t\t\t</Router>\n\t\t\t</Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import axios from \"axios\";\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nimport {\r\n\tUSER_LOADING,\r\n\tUSER_LOADED,\r\n\tAUTH_ERROR,\r\n\tLOGIN_SUCCESS,\r\n\tLOGIN_FAIL,\r\n\tLOGOUT_SUCCESS,\r\n\tREGISTER_SUCCESS,\r\n\tREGISTER_FAIL\r\n} from \"./types\";\r\n\r\n// Check token & load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n\t// User loading\r\n\tdispatch({ type: USER_LOADING });\r\n\r\n\t// Get token from local storage\r\n\tconst token = getState().auth.token;\r\n\r\n\t// Headers\r\n\tconst config = {\r\n\t\theaders: {\r\n\t\t\t\"Content-type\": \"application/json\"\r\n\t\t}\r\n\t};\r\n\r\n\t// If token, then add to headers\r\n\tif (token) {\r\n\t\tconfig.headers[\"x-auth-token\"] = token;\r\n\t}\r\n\r\n\taxios\r\n\t\t.get(\"/api/auth/user\", config)\r\n\t\t.then(res =>\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: USER_LOADED,\r\n\t\t\t\tpayload: res.data\r\n\t\t\t})\r\n\t\t)\r\n\t\t.catch(err => {\r\n\t\t\tconsole.log(err);\r\n\r\n\t\t\tdispatch(returnErrors(err.response.data, err.response.status));\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: AUTH_ERROR\r\n\t\t\t});\r\n\t\t});\r\n};\r\n","import { GET_ERRORS, CLEAR_ERRORS } from \"./types\";\r\n\r\n// Return errors\r\nexport const returnErrors = (msg, status, id = null) => {\r\n\treturn {\r\n\t\ttype: GET_ERRORS,\r\n\t\tpayload: {\r\n\t\t\tmsg,\r\n\t\t\tstatus,\r\n\t\t\tid\r\n\t\t}\r\n\t};\r\n};\r\n\r\n// Clear errors\r\nexport const clearErrors = () => {\r\n\treturn {\r\n\t\ttype: CLEAR_ERRORS\r\n\t};\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}